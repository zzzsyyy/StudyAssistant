<template>
  <view wx:if="{{ pageState.state === 'finish' }}" class="wrap">
    <view class="edit_wrap">
      <view class="edit">我的编辑</view>
      <view class="btn_wrap">
        <button hover-class="btn_hover" bind:tap="onAdd" class="add">
          新建
        </button>
      </view>
    </view>
    <view class="divider">
      <view></view>
    </view>

    <view
      data-voc="{{ item.title }}"
      class="voc_wrap"
      bind:tap="{{ onDetail }}"
      wx:for="{{ user_edit }}"
      wx:key="{{ item.id }}"
    >
      <entry-item title="{{ item.entry_title }}" flag="{{ false }}"> </entry-item>
      <view class="divider">
        <view></view>
      </view>
    </view>
  </view>

  <van-empty wx:if="{{ pageState.state === 'empty' }}" description="这里空空如也～" />
  <van-empty image="network" wx:if="{{ pageState.state === 'error' }}" description="发生错误惹~" />
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import { navTo } from '../../utils/common'
  import { request } from '../../utils/request'
  import pageStates from '../../utils/pageState'

  createPage({
    data: {
      user_edit: []
    },
    async onLoad(options) {
      const pageState = pageStates(this)
      pageState.loading()
      try {
        const res = await request({
          url: '/entry/myedit',
          data: {
            user_id: wx.getStorageSync('user_id')
          },
          method: 'POST'
        })
        console.log(res)
        const userEdit = res.data.data.myedit_list
        wx.setStorageSync('useredit', userEdit)
        this.setData({ user_edit: userEdit })
      } catch (err) {
        pageState.error()
        console.log("error in 'myEdit.js:52'")
        console.log(err)
      }
      if (this.data.user_edit.length == 0 && this.data.pageState.state != 'error') {
        console.log('get empty')
        pageState.empty()
      } else if (this.data.pageState.state == 'loading') {
        pageState.finish()
      }
    },
    onDetail(e) {
      var { entry_id } = e.currentTarget.dataset
      navTo({ page: 'entryDetail', args: `?entry_id=${entry_id_tmp}` })
    },
    onAdd() {
      navTo({ page: 'addEntry' })
    }
  })
</script>

<style lang="less">
  page {
    background-color: var(--pageColorLight);
  }

  .wrap {
    display: flex;
    background-color: var(--boardColorLight);
    margin: 40rpx 20rpx 0;
    border-radius: 16rpx;
    flex-direction: column;

    .edit_wrap {
      width: 100%;
      height: 80rpx;
      display: flex;
      justify-content: space-between;
      align-items: center;

      /*background-color: #f8f8f8;*/
      .edit {
        font-size: 32rpx;
        margin: 10rpx 0 0 20rpx;
      }
    }
  }

  .btn_wrap {
    display: flex;
    align-items: center;
    margin-right: 14rpx;
    .add {
      font-size: 24rpx;
      height: 56rpx;
      width: 110rpx;
      background-color: #eee;
      border-radius: 12rpx;
      &::after {
        border: 0;
        border-radius: 12rpx;
      }
    }
  }

  .btn_hover {
    background-color: #dcdcdc !important;
    opacity: 0.9 !important;
  }

  .divider {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    margin: 8rpx 0 8rpx;
    view {
      width: 90%;
      height: 2rpx;
      background-color: #f4f4f4;
    }
  }

  @media (prefers-color-scheme: dark) {
    page {
      background-color: var(--pageColorDark);
    }
    .wrap {
      background-color: var(--boardColorDark);
    }
    .btn_wrap {
      .add {
        background-color: #333;
      }
    }
  }
</style>

<script type="application/json">
  {
    "navigationBarTitleText": "我的编辑",
    "usingComponents": {
      "entry-item": "../../components/entry-item/entry-item",
      "van-empty": "../../components/vant/empty/index"
    }
  }
</script>